// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyProtocol.proto
#pragma warning(disable:4800)
#ifndef GOOGLE_PROTOBUF_INCLUDED_MyProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MyProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MyStruct.pb.h"
#include "MyEnum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MyProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MyProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MyProtocol_2eproto;
namespace PROTOCOL {
class C_ATTACK;
struct C_ATTACKDefaultTypeInternal;
extern C_ATTACKDefaultTypeInternal _C_ATTACK_default_instance_;
class C_CHAT;
struct C_CHATDefaultTypeInternal;
extern C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
class C_ENTER_ROOM;
struct C_ENTER_ROOMDefaultTypeInternal;
extern C_ENTER_ROOMDefaultTypeInternal _C_ENTER_ROOM_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_MOVE;
struct C_MOVEDefaultTypeInternal;
extern C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
class C_PLAYERLIST;
struct C_PLAYERLISTDefaultTypeInternal;
extern C_PLAYERLISTDefaultTypeInternal _C_PLAYERLIST_default_instance_;
class S_ATTACK;
struct S_ATTACKDefaultTypeInternal;
extern S_ATTACKDefaultTypeInternal _S_ATTACK_default_instance_;
class S_CHAT;
struct S_CHATDefaultTypeInternal;
extern S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
class S_ENTER_ROOM;
struct S_ENTER_ROOMDefaultTypeInternal;
extern S_ENTER_ROOMDefaultTypeInternal _S_ENTER_ROOM_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MOVE;
struct S_MOVEDefaultTypeInternal;
extern S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
class S_PLAYERLIST;
struct S_PLAYERLISTDefaultTypeInternal;
extern S_PLAYERLISTDefaultTypeInternal _S_PLAYERLIST_default_instance_;
}  // namespace PROTOCOL
PROTOBUF_NAMESPACE_OPEN
template<> ::PROTOCOL::C_ATTACK* Arena::CreateMaybeMessage<::PROTOCOL::C_ATTACK>(Arena*);
template<> ::PROTOCOL::C_CHAT* Arena::CreateMaybeMessage<::PROTOCOL::C_CHAT>(Arena*);
template<> ::PROTOCOL::C_ENTER_ROOM* Arena::CreateMaybeMessage<::PROTOCOL::C_ENTER_ROOM>(Arena*);
template<> ::PROTOCOL::C_LOGIN* Arena::CreateMaybeMessage<::PROTOCOL::C_LOGIN>(Arena*);
template<> ::PROTOCOL::C_MOVE* Arena::CreateMaybeMessage<::PROTOCOL::C_MOVE>(Arena*);
template<> ::PROTOCOL::C_PLAYERLIST* Arena::CreateMaybeMessage<::PROTOCOL::C_PLAYERLIST>(Arena*);
template<> ::PROTOCOL::S_ATTACK* Arena::CreateMaybeMessage<::PROTOCOL::S_ATTACK>(Arena*);
template<> ::PROTOCOL::S_CHAT* Arena::CreateMaybeMessage<::PROTOCOL::S_CHAT>(Arena*);
template<> ::PROTOCOL::S_ENTER_ROOM* Arena::CreateMaybeMessage<::PROTOCOL::S_ENTER_ROOM>(Arena*);
template<> ::PROTOCOL::S_LOGIN* Arena::CreateMaybeMessage<::PROTOCOL::S_LOGIN>(Arena*);
template<> ::PROTOCOL::S_MOVE* Arena::CreateMaybeMessage<::PROTOCOL::S_MOVE>(Arena*);
template<> ::PROTOCOL::S_PLAYERLIST* Arena::CreateMaybeMessage<::PROTOCOL::S_PLAYERLIST>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PROTOCOL {

// ===================================================================

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  explicit constexpr C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_LOGIN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pw();
  PROTOBUF_NODISCARD std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // @@protoc_insertion_point(class_scope:PROTOCOL.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit constexpr S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_LOGIN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .PROTOCOL.PLAYER player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::PROTOCOL::PLAYER& player() const;
  PROTOBUF_NODISCARD ::PROTOCOL::PLAYER* release_player();
  ::PROTOCOL::PLAYER* mutable_player();
  void set_allocated_player(::PROTOCOL::PLAYER* player);
  private:
  const ::PROTOCOL::PLAYER& _internal_player() const;
  ::PROTOCOL::PLAYER* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::PROTOCOL::PLAYER* player);
  ::PROTOCOL::PLAYER* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PROTOCOL.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOCOL::PLAYER* player_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.C_ENTER_ROOM) */ {
 public:
  inline C_ENTER_ROOM() : C_ENTER_ROOM(nullptr) {}
  ~C_ENTER_ROOM() override;
  explicit constexpr C_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ENTER_ROOM(const C_ENTER_ROOM& from);
  C_ENTER_ROOM(C_ENTER_ROOM&& from) noexcept
    : C_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline C_ENTER_ROOM& operator=(const C_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER_ROOM& operator=(C_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_ENTER_ROOM*>(
               &_C_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_ENTER_ROOM& a, C_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ENTER_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ENTER_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_ENTER_ROOM& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ENTER_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.C_ENTER_ROOM";
  }
  protected:
  explicit C_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNumFieldNumber = 1,
  };
  // uint64 roomNum = 1;
  void clear_roomnum();
  uint64_t roomnum() const;
  void set_roomnum(uint64_t value);
  private:
  uint64_t _internal_roomnum() const;
  void _internal_set_roomnum(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PROTOCOL.C_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t roomnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.S_ENTER_ROOM) */ {
 public:
  inline S_ENTER_ROOM() : S_ENTER_ROOM(nullptr) {}
  ~S_ENTER_ROOM() override;
  explicit constexpr S_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_ROOM(const S_ENTER_ROOM& from);
  S_ENTER_ROOM(S_ENTER_ROOM&& from) noexcept
    : S_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline S_ENTER_ROOM& operator=(const S_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_ROOM& operator=(S_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_ROOM*>(
               &_S_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_ENTER_ROOM& a, S_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ENTER_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ENTER_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_ENTER_ROOM& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.S_ENTER_ROOM";
  }
  protected:
  explicit S_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .PROTOCOL.PLAYER player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::PROTOCOL::PLAYER& player() const;
  PROTOBUF_NODISCARD ::PROTOCOL::PLAYER* release_player();
  ::PROTOCOL::PLAYER* mutable_player();
  void set_allocated_player(::PROTOCOL::PLAYER* player);
  private:
  const ::PROTOCOL::PLAYER& _internal_player() const;
  ::PROTOCOL::PLAYER* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::PROTOCOL::PLAYER* player);
  ::PROTOCOL::PLAYER* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PROTOCOL.S_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOCOL::PLAYER* player_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAYERLIST final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PROTOCOL.C_PLAYERLIST) */ {
 public:
  inline C_PLAYERLIST() : C_PLAYERLIST(nullptr) {}
  explicit constexpr C_PLAYERLIST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAYERLIST(const C_PLAYERLIST& from);
  C_PLAYERLIST(C_PLAYERLIST&& from) noexcept
    : C_PLAYERLIST() {
    *this = ::std::move(from);
  }

  inline C_PLAYERLIST& operator=(const C_PLAYERLIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAYERLIST& operator=(C_PLAYERLIST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAYERLIST& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAYERLIST* internal_default_instance() {
    return reinterpret_cast<const C_PLAYERLIST*>(
               &_C_PLAYERLIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_PLAYERLIST& a, C_PLAYERLIST& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAYERLIST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAYERLIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_PLAYERLIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_PLAYERLIST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_PLAYERLIST& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_PLAYERLIST& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.C_PLAYERLIST";
  }
  protected:
  explicit C_PLAYERLIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PROTOCOL.C_PLAYERLIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYERLIST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.S_PLAYERLIST) */ {
 public:
  inline S_PLAYERLIST() : S_PLAYERLIST(nullptr) {}
  ~S_PLAYERLIST() override;
  explicit constexpr S_PLAYERLIST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYERLIST(const S_PLAYERLIST& from);
  S_PLAYERLIST(S_PLAYERLIST&& from) noexcept
    : S_PLAYERLIST() {
    *this = ::std::move(from);
  }

  inline S_PLAYERLIST& operator=(const S_PLAYERLIST& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYERLIST& operator=(S_PLAYERLIST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYERLIST& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYERLIST* internal_default_instance() {
    return reinterpret_cast<const S_PLAYERLIST*>(
               &_S_PLAYERLIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_PLAYERLIST& a, S_PLAYERLIST& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYERLIST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYERLIST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PLAYERLIST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PLAYERLIST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PLAYERLIST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_PLAYERLIST& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYERLIST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.S_PLAYERLIST";
  }
  protected:
  explicit S_PLAYERLIST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .PROTOCOL.PLAYER players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::PROTOCOL::PLAYER* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER >*
      mutable_players();
  private:
  const ::PROTOCOL::PLAYER& _internal_players(int index) const;
  ::PROTOCOL::PLAYER* _internal_add_players();
  public:
  const ::PROTOCOL::PLAYER& players(int index) const;
  ::PROTOCOL::PLAYER* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER >&
      players() const;

  // @@protoc_insertion_point(class_scope:PROTOCOL.S_PLAYERLIST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER > players_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.C_MOVE) */ {
 public:
  inline C_MOVE() : C_MOVE(nullptr) {}
  ~C_MOVE() override;
  explicit constexpr C_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MOVE(const C_MOVE& from);
  C_MOVE(C_MOVE&& from) noexcept
    : C_MOVE() {
    *this = ::std::move(from);
  }

  inline C_MOVE& operator=(const C_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE& operator=(C_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE* internal_default_instance() {
    return reinterpret_cast<const C_MOVE*>(
               &_C_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_MOVE& a, C_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_MOVE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.C_MOVE";
  }
  protected:
  explicit C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .PROTOCOL.PLAYER player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::PROTOCOL::PLAYER& player() const;
  PROTOBUF_NODISCARD ::PROTOCOL::PLAYER* release_player();
  ::PROTOCOL::PLAYER* mutable_player();
  void set_allocated_player(::PROTOCOL::PLAYER* player);
  private:
  const ::PROTOCOL::PLAYER& _internal_player() const;
  ::PROTOCOL::PLAYER* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::PROTOCOL::PLAYER* player);
  ::PROTOCOL::PLAYER* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:PROTOCOL.C_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOCOL::PLAYER* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.S_MOVE) */ {
 public:
  inline S_MOVE() : S_MOVE(nullptr) {}
  ~S_MOVE() override;
  explicit constexpr S_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MOVE(const S_MOVE& from);
  S_MOVE(S_MOVE&& from) noexcept
    : S_MOVE() {
    *this = ::std::move(from);
  }

  inline S_MOVE& operator=(const S_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE& operator=(S_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE* internal_default_instance() {
    return reinterpret_cast<const S_MOVE*>(
               &_S_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_MOVE& a, S_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_MOVE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.S_MOVE";
  }
  protected:
  explicit S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .PROTOCOL.PLAYER player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::PROTOCOL::PLAYER& player() const;
  PROTOBUF_NODISCARD ::PROTOCOL::PLAYER* release_player();
  ::PROTOCOL::PLAYER* mutable_player();
  void set_allocated_player(::PROTOCOL::PLAYER* player);
  private:
  const ::PROTOCOL::PLAYER& _internal_player() const;
  ::PROTOCOL::PLAYER* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::PROTOCOL::PLAYER* player);
  ::PROTOCOL::PLAYER* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:PROTOCOL.S_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOCOL::PLAYER* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.C_ATTACK) */ {
 public:
  inline C_ATTACK() : C_ATTACK(nullptr) {}
  ~C_ATTACK() override;
  explicit constexpr C_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ATTACK(const C_ATTACK& from);
  C_ATTACK(C_ATTACK&& from) noexcept
    : C_ATTACK() {
    *this = ::std::move(from);
  }

  inline C_ATTACK& operator=(const C_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ATTACK& operator=(C_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ATTACK* internal_default_instance() {
    return reinterpret_cast<const C_ATTACK*>(
               &_C_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_ATTACK& a, C_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ATTACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ATTACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_ATTACK& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ATTACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.C_ATTACK";
  }
  protected:
  explicit C_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVictimsFieldNumber = 2,
    kAttackerFieldNumber = 1,
    kAttackTypeFieldNumber = 3,
  };
  // repeated .PROTOCOL.PLAYER victims = 2;
  int victims_size() const;
  private:
  int _internal_victims_size() const;
  public:
  void clear_victims();
  ::PROTOCOL::PLAYER* mutable_victims(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER >*
      mutable_victims();
  private:
  const ::PROTOCOL::PLAYER& _internal_victims(int index) const;
  ::PROTOCOL::PLAYER* _internal_add_victims();
  public:
  const ::PROTOCOL::PLAYER& victims(int index) const;
  ::PROTOCOL::PLAYER* add_victims();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER >&
      victims() const;

  // .PROTOCOL.PLAYER attacker = 1;
  bool has_attacker() const;
  private:
  bool _internal_has_attacker() const;
  public:
  void clear_attacker();
  const ::PROTOCOL::PLAYER& attacker() const;
  PROTOBUF_NODISCARD ::PROTOCOL::PLAYER* release_attacker();
  ::PROTOCOL::PLAYER* mutable_attacker();
  void set_allocated_attacker(::PROTOCOL::PLAYER* attacker);
  private:
  const ::PROTOCOL::PLAYER& _internal_attacker() const;
  ::PROTOCOL::PLAYER* _internal_mutable_attacker();
  public:
  void unsafe_arena_set_allocated_attacker(
      ::PROTOCOL::PLAYER* attacker);
  ::PROTOCOL::PLAYER* unsafe_arena_release_attacker();

  // .PROTOCOL.AttackType attackType = 3;
  void clear_attacktype();
  ::PROTOCOL::AttackType attacktype() const;
  void set_attacktype(::PROTOCOL::AttackType value);
  private:
  ::PROTOCOL::AttackType _internal_attacktype() const;
  void _internal_set_attacktype(::PROTOCOL::AttackType value);
  public:

  // @@protoc_insertion_point(class_scope:PROTOCOL.C_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER > victims_;
  ::PROTOCOL::PLAYER* attacker_;
  int attacktype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.S_ATTACK) */ {
 public:
  inline S_ATTACK() : S_ATTACK(nullptr) {}
  ~S_ATTACK() override;
  explicit constexpr S_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ATTACK(const S_ATTACK& from);
  S_ATTACK(S_ATTACK&& from) noexcept
    : S_ATTACK() {
    *this = ::std::move(from);
  }

  inline S_ATTACK& operator=(const S_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ATTACK& operator=(S_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ATTACK* internal_default_instance() {
    return reinterpret_cast<const S_ATTACK*>(
               &_S_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_ATTACK& a, S_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ATTACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ATTACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_ATTACK& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ATTACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.S_ATTACK";
  }
  protected:
  explicit S_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVictimsFieldNumber = 2,
    kAttackerFieldNumber = 1,
    kDamageFieldNumber = 3,
    kAttackTypeFieldNumber = 4,
  };
  // repeated .PROTOCOL.PLAYER victims = 2;
  int victims_size() const;
  private:
  int _internal_victims_size() const;
  public:
  void clear_victims();
  ::PROTOCOL::PLAYER* mutable_victims(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER >*
      mutable_victims();
  private:
  const ::PROTOCOL::PLAYER& _internal_victims(int index) const;
  ::PROTOCOL::PLAYER* _internal_add_victims();
  public:
  const ::PROTOCOL::PLAYER& victims(int index) const;
  ::PROTOCOL::PLAYER* add_victims();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER >&
      victims() const;

  // .PROTOCOL.PLAYER attacker = 1;
  bool has_attacker() const;
  private:
  bool _internal_has_attacker() const;
  public:
  void clear_attacker();
  const ::PROTOCOL::PLAYER& attacker() const;
  PROTOBUF_NODISCARD ::PROTOCOL::PLAYER* release_attacker();
  ::PROTOCOL::PLAYER* mutable_attacker();
  void set_allocated_attacker(::PROTOCOL::PLAYER* attacker);
  private:
  const ::PROTOCOL::PLAYER& _internal_attacker() const;
  ::PROTOCOL::PLAYER* _internal_mutable_attacker();
  public:
  void unsafe_arena_set_allocated_attacker(
      ::PROTOCOL::PLAYER* attacker);
  ::PROTOCOL::PLAYER* unsafe_arena_release_attacker();

  // uint64 damage = 3;
  void clear_damage();
  uint64_t damage() const;
  void set_damage(uint64_t value);
  private:
  uint64_t _internal_damage() const;
  void _internal_set_damage(uint64_t value);
  public:

  // .PROTOCOL.AttackType attackType = 4;
  void clear_attacktype();
  ::PROTOCOL::AttackType attacktype() const;
  void set_attacktype(::PROTOCOL::AttackType value);
  private:
  ::PROTOCOL::AttackType _internal_attacktype() const;
  void _internal_set_attacktype(::PROTOCOL::AttackType value);
  public:

  // @@protoc_insertion_point(class_scope:PROTOCOL.S_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER > victims_;
  ::PROTOCOL::PLAYER* attacker_;
  uint64_t damage_;
  int attacktype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProtocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.C_CHAT) */ {
 public:
  inline C_CHAT() : C_CHAT(nullptr) {}
  ~C_CHAT() override;
  explicit constexpr C_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHAT(const C_CHAT& from);
  C_CHAT(C_CHAT&& from) noexcept
    : C_CHAT() {
    *this = ::std::move(from);
  }

  inline C_CHAT& operator=(const C_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT& operator=(C_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_CHAT*>(
               &_C_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_CHAT& a, C_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_CHAT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.C_CHAT";
  }
  protected:
  explicit C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:PROTOCOL.C_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProtocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PROTOCOL.S_CHAT) */ {
 public:
  inline S_CHAT() : S_CHAT(nullptr) {}
  ~S_CHAT() override;
  explicit constexpr S_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT(const S_CHAT& from);
  S_CHAT(S_CHAT&& from) noexcept
    : S_CHAT() {
    *this = ::std::move(from);
  }

  inline S_CHAT& operator=(const S_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT& operator=(S_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHAT*>(
               &_S_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_CHAT& a, S_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_CHAT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PROTOCOL.S_CHAT";
  }
  protected:
  explicit S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kPlayerFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .PROTOCOL.PLAYER player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::PROTOCOL::PLAYER& player() const;
  PROTOBUF_NODISCARD ::PROTOCOL::PLAYER* release_player();
  ::PROTOCOL::PLAYER* mutable_player();
  void set_allocated_player(::PROTOCOL::PLAYER* player);
  private:
  const ::PROTOCOL::PLAYER& _internal_player() const;
  ::PROTOCOL::PLAYER* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::PROTOCOL::PLAYER* player);
  ::PROTOCOL::PLAYER* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:PROTOCOL.S_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOCOL::PLAYER* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN

// string id = 1;
inline void C_LOGIN::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& C_LOGIN::id() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.C_LOGIN.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PROTOCOL.C_LOGIN.id)
}
inline std::string* C_LOGIN::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:PROTOCOL.C_LOGIN.id)
  return _s;
}
inline const std::string& C_LOGIN::_internal_id() const {
  return id_.Get();
}
inline void C_LOGIN::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_id() {
  // @@protoc_insertion_point(field_release:PROTOCOL.C_LOGIN.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_LOGIN::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PROTOCOL.C_LOGIN.id)
}

// string pw = 2;
inline void C_LOGIN::clear_pw() {
  pw_.ClearToEmpty();
}
inline const std::string& C_LOGIN::pw() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.C_LOGIN.pw)
  return _internal_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_pw(ArgT0&& arg0, ArgT... args) {
 
 pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PROTOCOL.C_LOGIN.pw)
}
inline std::string* C_LOGIN::mutable_pw() {
  std::string* _s = _internal_mutable_pw();
  // @@protoc_insertion_point(field_mutable:PROTOCOL.C_LOGIN.pw)
  return _s;
}
inline const std::string& C_LOGIN::_internal_pw() const {
  return pw_.Get();
}
inline void C_LOGIN::_internal_set_pw(const std::string& value) {
  
  pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_pw() {
  
  return pw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_pw() {
  // @@protoc_insertion_point(field_release:PROTOCOL.C_LOGIN.pw)
  return pw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_LOGIN::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  pw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pw,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pw_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PROTOCOL.C_LOGIN.pw)
}

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:PROTOCOL.S_LOGIN.success)
}

// .PROTOCOL.PLAYER player = 2;
inline bool S_LOGIN::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_LOGIN::has_player() const {
  return _internal_has_player();
}
inline const ::PROTOCOL::PLAYER& S_LOGIN::_internal_player() const {
  const ::PROTOCOL::PLAYER* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOCOL::PLAYER&>(
      ::PROTOCOL::_PLAYER_default_instance_);
}
inline const ::PROTOCOL::PLAYER& S_LOGIN::player() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.S_LOGIN.player)
  return _internal_player();
}
inline void S_LOGIN::unsafe_arena_set_allocated_player(
    ::PROTOCOL::PLAYER* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PROTOCOL.S_LOGIN.player)
}
inline ::PROTOCOL::PLAYER* S_LOGIN::release_player() {
  
  ::PROTOCOL::PLAYER* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOCOL::PLAYER* S_LOGIN::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:PROTOCOL.S_LOGIN.player)
  
  ::PROTOCOL::PLAYER* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::PROTOCOL::PLAYER* S_LOGIN::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOCOL::PLAYER>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::PROTOCOL::PLAYER* S_LOGIN::mutable_player() {
  ::PROTOCOL::PLAYER* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:PROTOCOL.S_LOGIN.player)
  return _msg;
}
inline void S_LOGIN::set_allocated_player(::PROTOCOL::PLAYER* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:PROTOCOL.S_LOGIN.player)
}

// -------------------------------------------------------------------

// C_ENTER_ROOM

// uint64 roomNum = 1;
inline void C_ENTER_ROOM::clear_roomnum() {
  roomnum_ = uint64_t{0u};
}
inline uint64_t C_ENTER_ROOM::_internal_roomnum() const {
  return roomnum_;
}
inline uint64_t C_ENTER_ROOM::roomnum() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.C_ENTER_ROOM.roomNum)
  return _internal_roomnum();
}
inline void C_ENTER_ROOM::_internal_set_roomnum(uint64_t value) {
  
  roomnum_ = value;
}
inline void C_ENTER_ROOM::set_roomnum(uint64_t value) {
  _internal_set_roomnum(value);
  // @@protoc_insertion_point(field_set:PROTOCOL.C_ENTER_ROOM.roomNum)
}

// -------------------------------------------------------------------

// S_ENTER_ROOM

// bool success = 1;
inline void S_ENTER_ROOM::clear_success() {
  success_ = false;
}
inline bool S_ENTER_ROOM::_internal_success() const {
  return success_;
}
inline bool S_ENTER_ROOM::success() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.S_ENTER_ROOM.success)
  return _internal_success();
}
inline void S_ENTER_ROOM::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_ENTER_ROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:PROTOCOL.S_ENTER_ROOM.success)
}

// .PROTOCOL.PLAYER player = 2;
inline bool S_ENTER_ROOM::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_ENTER_ROOM::has_player() const {
  return _internal_has_player();
}
inline const ::PROTOCOL::PLAYER& S_ENTER_ROOM::_internal_player() const {
  const ::PROTOCOL::PLAYER* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOCOL::PLAYER&>(
      ::PROTOCOL::_PLAYER_default_instance_);
}
inline const ::PROTOCOL::PLAYER& S_ENTER_ROOM::player() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.S_ENTER_ROOM.player)
  return _internal_player();
}
inline void S_ENTER_ROOM::unsafe_arena_set_allocated_player(
    ::PROTOCOL::PLAYER* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PROTOCOL.S_ENTER_ROOM.player)
}
inline ::PROTOCOL::PLAYER* S_ENTER_ROOM::release_player() {
  
  ::PROTOCOL::PLAYER* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOCOL::PLAYER* S_ENTER_ROOM::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:PROTOCOL.S_ENTER_ROOM.player)
  
  ::PROTOCOL::PLAYER* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::PROTOCOL::PLAYER* S_ENTER_ROOM::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOCOL::PLAYER>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::PROTOCOL::PLAYER* S_ENTER_ROOM::mutable_player() {
  ::PROTOCOL::PLAYER* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:PROTOCOL.S_ENTER_ROOM.player)
  return _msg;
}
inline void S_ENTER_ROOM::set_allocated_player(::PROTOCOL::PLAYER* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:PROTOCOL.S_ENTER_ROOM.player)
}

// -------------------------------------------------------------------

// C_PLAYERLIST

// -------------------------------------------------------------------

// S_PLAYERLIST

// repeated .PROTOCOL.PLAYER players = 1;
inline int S_PLAYERLIST::_internal_players_size() const {
  return players_.size();
}
inline int S_PLAYERLIST::players_size() const {
  return _internal_players_size();
}
inline ::PROTOCOL::PLAYER* S_PLAYERLIST::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:PROTOCOL.S_PLAYERLIST.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER >*
S_PLAYERLIST::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:PROTOCOL.S_PLAYERLIST.players)
  return &players_;
}
inline const ::PROTOCOL::PLAYER& S_PLAYERLIST::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::PROTOCOL::PLAYER& S_PLAYERLIST::players(int index) const {
  // @@protoc_insertion_point(field_get:PROTOCOL.S_PLAYERLIST.players)
  return _internal_players(index);
}
inline ::PROTOCOL::PLAYER* S_PLAYERLIST::_internal_add_players() {
  return players_.Add();
}
inline ::PROTOCOL::PLAYER* S_PLAYERLIST::add_players() {
  ::PROTOCOL::PLAYER* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:PROTOCOL.S_PLAYERLIST.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER >&
S_PLAYERLIST::players() const {
  // @@protoc_insertion_point(field_list:PROTOCOL.S_PLAYERLIST.players)
  return players_;
}

// -------------------------------------------------------------------

// C_MOVE

// .PROTOCOL.PLAYER player = 1;
inline bool C_MOVE::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool C_MOVE::has_player() const {
  return _internal_has_player();
}
inline const ::PROTOCOL::PLAYER& C_MOVE::_internal_player() const {
  const ::PROTOCOL::PLAYER* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOCOL::PLAYER&>(
      ::PROTOCOL::_PLAYER_default_instance_);
}
inline const ::PROTOCOL::PLAYER& C_MOVE::player() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.C_MOVE.player)
  return _internal_player();
}
inline void C_MOVE::unsafe_arena_set_allocated_player(
    ::PROTOCOL::PLAYER* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PROTOCOL.C_MOVE.player)
}
inline ::PROTOCOL::PLAYER* C_MOVE::release_player() {
  
  ::PROTOCOL::PLAYER* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOCOL::PLAYER* C_MOVE::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:PROTOCOL.C_MOVE.player)
  
  ::PROTOCOL::PLAYER* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::PROTOCOL::PLAYER* C_MOVE::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOCOL::PLAYER>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::PROTOCOL::PLAYER* C_MOVE::mutable_player() {
  ::PROTOCOL::PLAYER* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:PROTOCOL.C_MOVE.player)
  return _msg;
}
inline void C_MOVE::set_allocated_player(::PROTOCOL::PLAYER* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:PROTOCOL.C_MOVE.player)
}

// -------------------------------------------------------------------

// S_MOVE

// .PROTOCOL.PLAYER player = 1;
inline bool S_MOVE::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_MOVE::has_player() const {
  return _internal_has_player();
}
inline const ::PROTOCOL::PLAYER& S_MOVE::_internal_player() const {
  const ::PROTOCOL::PLAYER* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOCOL::PLAYER&>(
      ::PROTOCOL::_PLAYER_default_instance_);
}
inline const ::PROTOCOL::PLAYER& S_MOVE::player() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.S_MOVE.player)
  return _internal_player();
}
inline void S_MOVE::unsafe_arena_set_allocated_player(
    ::PROTOCOL::PLAYER* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PROTOCOL.S_MOVE.player)
}
inline ::PROTOCOL::PLAYER* S_MOVE::release_player() {
  
  ::PROTOCOL::PLAYER* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOCOL::PLAYER* S_MOVE::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:PROTOCOL.S_MOVE.player)
  
  ::PROTOCOL::PLAYER* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::PROTOCOL::PLAYER* S_MOVE::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOCOL::PLAYER>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::PROTOCOL::PLAYER* S_MOVE::mutable_player() {
  ::PROTOCOL::PLAYER* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:PROTOCOL.S_MOVE.player)
  return _msg;
}
inline void S_MOVE::set_allocated_player(::PROTOCOL::PLAYER* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:PROTOCOL.S_MOVE.player)
}

// -------------------------------------------------------------------

// C_ATTACK

// .PROTOCOL.PLAYER attacker = 1;
inline bool C_ATTACK::_internal_has_attacker() const {
  return this != internal_default_instance() && attacker_ != nullptr;
}
inline bool C_ATTACK::has_attacker() const {
  return _internal_has_attacker();
}
inline const ::PROTOCOL::PLAYER& C_ATTACK::_internal_attacker() const {
  const ::PROTOCOL::PLAYER* p = attacker_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOCOL::PLAYER&>(
      ::PROTOCOL::_PLAYER_default_instance_);
}
inline const ::PROTOCOL::PLAYER& C_ATTACK::attacker() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.C_ATTACK.attacker)
  return _internal_attacker();
}
inline void C_ATTACK::unsafe_arena_set_allocated_attacker(
    ::PROTOCOL::PLAYER* attacker) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attacker_);
  }
  attacker_ = attacker;
  if (attacker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PROTOCOL.C_ATTACK.attacker)
}
inline ::PROTOCOL::PLAYER* C_ATTACK::release_attacker() {
  
  ::PROTOCOL::PLAYER* temp = attacker_;
  attacker_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOCOL::PLAYER* C_ATTACK::unsafe_arena_release_attacker() {
  // @@protoc_insertion_point(field_release:PROTOCOL.C_ATTACK.attacker)
  
  ::PROTOCOL::PLAYER* temp = attacker_;
  attacker_ = nullptr;
  return temp;
}
inline ::PROTOCOL::PLAYER* C_ATTACK::_internal_mutable_attacker() {
  
  if (attacker_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOCOL::PLAYER>(GetArenaForAllocation());
    attacker_ = p;
  }
  return attacker_;
}
inline ::PROTOCOL::PLAYER* C_ATTACK::mutable_attacker() {
  ::PROTOCOL::PLAYER* _msg = _internal_mutable_attacker();
  // @@protoc_insertion_point(field_mutable:PROTOCOL.C_ATTACK.attacker)
  return _msg;
}
inline void C_ATTACK::set_allocated_attacker(::PROTOCOL::PLAYER* attacker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attacker_);
  }
  if (attacker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attacker));
    if (message_arena != submessage_arena) {
      attacker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker, submessage_arena);
    }
    
  } else {
    
  }
  attacker_ = attacker;
  // @@protoc_insertion_point(field_set_allocated:PROTOCOL.C_ATTACK.attacker)
}

// repeated .PROTOCOL.PLAYER victims = 2;
inline int C_ATTACK::_internal_victims_size() const {
  return victims_.size();
}
inline int C_ATTACK::victims_size() const {
  return _internal_victims_size();
}
inline ::PROTOCOL::PLAYER* C_ATTACK::mutable_victims(int index) {
  // @@protoc_insertion_point(field_mutable:PROTOCOL.C_ATTACK.victims)
  return victims_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER >*
C_ATTACK::mutable_victims() {
  // @@protoc_insertion_point(field_mutable_list:PROTOCOL.C_ATTACK.victims)
  return &victims_;
}
inline const ::PROTOCOL::PLAYER& C_ATTACK::_internal_victims(int index) const {
  return victims_.Get(index);
}
inline const ::PROTOCOL::PLAYER& C_ATTACK::victims(int index) const {
  // @@protoc_insertion_point(field_get:PROTOCOL.C_ATTACK.victims)
  return _internal_victims(index);
}
inline ::PROTOCOL::PLAYER* C_ATTACK::_internal_add_victims() {
  return victims_.Add();
}
inline ::PROTOCOL::PLAYER* C_ATTACK::add_victims() {
  ::PROTOCOL::PLAYER* _add = _internal_add_victims();
  // @@protoc_insertion_point(field_add:PROTOCOL.C_ATTACK.victims)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER >&
C_ATTACK::victims() const {
  // @@protoc_insertion_point(field_list:PROTOCOL.C_ATTACK.victims)
  return victims_;
}

// .PROTOCOL.AttackType attackType = 3;
inline void C_ATTACK::clear_attacktype() {
  attacktype_ = 0;
}
inline ::PROTOCOL::AttackType C_ATTACK::_internal_attacktype() const {
  return static_cast< ::PROTOCOL::AttackType >(attacktype_);
}
inline ::PROTOCOL::AttackType C_ATTACK::attacktype() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.C_ATTACK.attackType)
  return _internal_attacktype();
}
inline void C_ATTACK::_internal_set_attacktype(::PROTOCOL::AttackType value) {
  
  attacktype_ = value;
}
inline void C_ATTACK::set_attacktype(::PROTOCOL::AttackType value) {
  _internal_set_attacktype(value);
  // @@protoc_insertion_point(field_set:PROTOCOL.C_ATTACK.attackType)
}

// -------------------------------------------------------------------

// S_ATTACK

// .PROTOCOL.PLAYER attacker = 1;
inline bool S_ATTACK::_internal_has_attacker() const {
  return this != internal_default_instance() && attacker_ != nullptr;
}
inline bool S_ATTACK::has_attacker() const {
  return _internal_has_attacker();
}
inline const ::PROTOCOL::PLAYER& S_ATTACK::_internal_attacker() const {
  const ::PROTOCOL::PLAYER* p = attacker_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOCOL::PLAYER&>(
      ::PROTOCOL::_PLAYER_default_instance_);
}
inline const ::PROTOCOL::PLAYER& S_ATTACK::attacker() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.S_ATTACK.attacker)
  return _internal_attacker();
}
inline void S_ATTACK::unsafe_arena_set_allocated_attacker(
    ::PROTOCOL::PLAYER* attacker) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attacker_);
  }
  attacker_ = attacker;
  if (attacker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PROTOCOL.S_ATTACK.attacker)
}
inline ::PROTOCOL::PLAYER* S_ATTACK::release_attacker() {
  
  ::PROTOCOL::PLAYER* temp = attacker_;
  attacker_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOCOL::PLAYER* S_ATTACK::unsafe_arena_release_attacker() {
  // @@protoc_insertion_point(field_release:PROTOCOL.S_ATTACK.attacker)
  
  ::PROTOCOL::PLAYER* temp = attacker_;
  attacker_ = nullptr;
  return temp;
}
inline ::PROTOCOL::PLAYER* S_ATTACK::_internal_mutable_attacker() {
  
  if (attacker_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOCOL::PLAYER>(GetArenaForAllocation());
    attacker_ = p;
  }
  return attacker_;
}
inline ::PROTOCOL::PLAYER* S_ATTACK::mutable_attacker() {
  ::PROTOCOL::PLAYER* _msg = _internal_mutable_attacker();
  // @@protoc_insertion_point(field_mutable:PROTOCOL.S_ATTACK.attacker)
  return _msg;
}
inline void S_ATTACK::set_allocated_attacker(::PROTOCOL::PLAYER* attacker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(attacker_);
  }
  if (attacker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attacker));
    if (message_arena != submessage_arena) {
      attacker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker, submessage_arena);
    }
    
  } else {
    
  }
  attacker_ = attacker;
  // @@protoc_insertion_point(field_set_allocated:PROTOCOL.S_ATTACK.attacker)
}

// repeated .PROTOCOL.PLAYER victims = 2;
inline int S_ATTACK::_internal_victims_size() const {
  return victims_.size();
}
inline int S_ATTACK::victims_size() const {
  return _internal_victims_size();
}
inline ::PROTOCOL::PLAYER* S_ATTACK::mutable_victims(int index) {
  // @@protoc_insertion_point(field_mutable:PROTOCOL.S_ATTACK.victims)
  return victims_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER >*
S_ATTACK::mutable_victims() {
  // @@protoc_insertion_point(field_mutable_list:PROTOCOL.S_ATTACK.victims)
  return &victims_;
}
inline const ::PROTOCOL::PLAYER& S_ATTACK::_internal_victims(int index) const {
  return victims_.Get(index);
}
inline const ::PROTOCOL::PLAYER& S_ATTACK::victims(int index) const {
  // @@protoc_insertion_point(field_get:PROTOCOL.S_ATTACK.victims)
  return _internal_victims(index);
}
inline ::PROTOCOL::PLAYER* S_ATTACK::_internal_add_victims() {
  return victims_.Add();
}
inline ::PROTOCOL::PLAYER* S_ATTACK::add_victims() {
  ::PROTOCOL::PLAYER* _add = _internal_add_victims();
  // @@protoc_insertion_point(field_add:PROTOCOL.S_ATTACK.victims)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOCOL::PLAYER >&
S_ATTACK::victims() const {
  // @@protoc_insertion_point(field_list:PROTOCOL.S_ATTACK.victims)
  return victims_;
}

// uint64 damage = 3;
inline void S_ATTACK::clear_damage() {
  damage_ = uint64_t{0u};
}
inline uint64_t S_ATTACK::_internal_damage() const {
  return damage_;
}
inline uint64_t S_ATTACK::damage() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.S_ATTACK.damage)
  return _internal_damage();
}
inline void S_ATTACK::_internal_set_damage(uint64_t value) {
  
  damage_ = value;
}
inline void S_ATTACK::set_damage(uint64_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:PROTOCOL.S_ATTACK.damage)
}

// .PROTOCOL.AttackType attackType = 4;
inline void S_ATTACK::clear_attacktype() {
  attacktype_ = 0;
}
inline ::PROTOCOL::AttackType S_ATTACK::_internal_attacktype() const {
  return static_cast< ::PROTOCOL::AttackType >(attacktype_);
}
inline ::PROTOCOL::AttackType S_ATTACK::attacktype() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.S_ATTACK.attackType)
  return _internal_attacktype();
}
inline void S_ATTACK::_internal_set_attacktype(::PROTOCOL::AttackType value) {
  
  attacktype_ = value;
}
inline void S_ATTACK::set_attacktype(::PROTOCOL::AttackType value) {
  _internal_set_attacktype(value);
  // @@protoc_insertion_point(field_set:PROTOCOL.S_ATTACK.attackType)
}

// -------------------------------------------------------------------

// C_CHAT

// string text = 1;
inline void C_CHAT::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& C_CHAT::text() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.C_CHAT.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHAT::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PROTOCOL.C_CHAT.text)
}
inline std::string* C_CHAT::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:PROTOCOL.C_CHAT.text)
  return _s;
}
inline const std::string& C_CHAT::_internal_text() const {
  return text_.Get();
}
inline void C_CHAT::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CHAT::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CHAT::release_text() {
  // @@protoc_insertion_point(field_release:PROTOCOL.C_CHAT.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CHAT::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PROTOCOL.C_CHAT.text)
}

// -------------------------------------------------------------------

// S_CHAT

// .PROTOCOL.PLAYER player = 1;
inline bool S_CHAT::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_CHAT::has_player() const {
  return _internal_has_player();
}
inline const ::PROTOCOL::PLAYER& S_CHAT::_internal_player() const {
  const ::PROTOCOL::PLAYER* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOCOL::PLAYER&>(
      ::PROTOCOL::_PLAYER_default_instance_);
}
inline const ::PROTOCOL::PLAYER& S_CHAT::player() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.S_CHAT.player)
  return _internal_player();
}
inline void S_CHAT::unsafe_arena_set_allocated_player(
    ::PROTOCOL::PLAYER* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PROTOCOL.S_CHAT.player)
}
inline ::PROTOCOL::PLAYER* S_CHAT::release_player() {
  
  ::PROTOCOL::PLAYER* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOCOL::PLAYER* S_CHAT::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:PROTOCOL.S_CHAT.player)
  
  ::PROTOCOL::PLAYER* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::PROTOCOL::PLAYER* S_CHAT::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOCOL::PLAYER>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::PROTOCOL::PLAYER* S_CHAT::mutable_player() {
  ::PROTOCOL::PLAYER* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:PROTOCOL.S_CHAT.player)
  return _msg;
}
inline void S_CHAT::set_allocated_player(::PROTOCOL::PLAYER* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:PROTOCOL.S_CHAT.player)
}

// string text = 2;
inline void S_CHAT::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& S_CHAT::text() const {
  // @@protoc_insertion_point(field_get:PROTOCOL.S_CHAT.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHAT::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PROTOCOL.S_CHAT.text)
}
inline std::string* S_CHAT::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:PROTOCOL.S_CHAT.text)
  return _s;
}
inline const std::string& S_CHAT::_internal_text() const {
  return text_.Get();
}
inline void S_CHAT::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CHAT::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CHAT::release_text() {
  // @@protoc_insertion_point(field_release:PROTOCOL.S_CHAT.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CHAT::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PROTOCOL.S_CHAT.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PROTOCOL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MyProtocol_2eproto
